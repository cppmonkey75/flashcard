<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Flashcards for <%= subject %> - <%= topic %></title>
  <style>
    /* General page layout */
    body {
      font-family: Arial, sans-serif;
      background-color: #f4f7f6;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      margin: 0;
      padding: 20px;
    }

    h1 {
      text-align: center;
      margin-bottom: 30px;
      color: #333;
    }

    /* Flashcard container */
    .flashcard {
      border: 2px solid #ccc;
      padding: 20px;
      margin-bottom: 30px;
      width: 80%;
      max-width: 500px;
      text-align: center;
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      transition: transform 0.3s ease-in-out;
    }

    .flashcard p {
      font-size: 1.2rem;
      margin: 20px 0;
    }

    /* Buttons container */
    .buttons {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 30px;
      width: 80%;
      max-width: 500px;
    }

    .buttons button {
      padding: 12px 20px;
      font-size: 1rem;
      cursor: pointer;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      transition: background-color 0.3s ease;
      width: auto; /* Ensure buttons are same size */
    }

    .buttons button:hover {
      background-color: #45a049;
    }

    button:disabled {
      background-color: #ccc;
      color: #666;
      cursor: not-allowed;
    }

    /* Done button */
    #doneButton {
      margin-top: 20px;
      padding: 12px 20px;
      font-size: 1.2rem;
      background-color: #2196F3;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      text-align: center;
    }

    #doneButton:hover {
      background-color: #0b7dda;
    }

    /* Delete button */
    #deleteButton {
      margin-top: 20px;
      padding: 12px 20px;
      font-size: 1.2rem;
      background-color: #f44336;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      text-align: center;
    }

    #deleteButton:hover {
      background-color: #e53935;
    }

    /* Save as PDF button */
    #savePdfButton {
      margin-top: 20px; /* Same margin as Done button */
      padding: 12px 20px; /* Same padding as Done button */
      font-size: 1.2rem; /* Same font size as Done button */
      background-color: #f39c12; /* Yellowish color */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    #savePdfButton:hover {
      background-color: #e67e22;
    }

    /* Hide flip button on small screens */
    @media (max-width: 600px) {
      .buttons {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>

  <h1>Flashcards for <%= subject %> - <%= topic %></h1>

  <!-- Flashcard container -->
  <div class="flashcard" id="flashcard">
    <div id="flashcardContent">
      <p id="flashcardQuestion"><%= flashcards[currentFlashcardIndex].question %></p>
    </div>
  </div>

  <!-- Buttons for navigation -->
  <div class="buttons">
    <button 
      id="prevButton" 
      onclick="showPrevCard()">
      Previous
    </button>
    <button id="flipButton" onclick="flipCard()">Flip</button>
    <button 
      id="nextButton" 
      onclick="showNextCard()">
      Next
    </button>
  </div>

  <!-- Done and Delete buttons -->
  <div class="buttons">
    <button id="doneButton" onclick="goToLandingPage()">Done</button>
    <button id="deleteButton" onclick="deleteFlashcard()">Delete</button>
  </div>

  <!-- Save as PDF button -->
  <button id="savePdfButton" onclick="saveAsPDF()">Save as PDF</button>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script>
    let flashcards = <%- JSON.stringify(flashcards) %>; // Pass flashcards to JS
    let currentFlashcardIndex = <%= currentFlashcardIndex %>;
    let flipped = false;

    // Show the previous card
    function showPrevCard() {
      if (currentFlashcardIndex > 0) {
        currentFlashcardIndex--;
        updateFlashcard();
      }
    }

    // Show the next card
    function showNextCard() {
      if (currentFlashcardIndex < flashcards.length - 1) {
        currentFlashcardIndex++;
        updateFlashcard();
      }
    }

    // Flip the current card
    function flipCard() {
      flipped = !flipped;
      const flashcardContent = document.getElementById('flashcardContent');
      if (flipped) {
        flashcardContent.innerHTML = `<p>${formatAnswer(flashcards[currentFlashcardIndex].answer)}</p>`; // Show answer with line breaks
      } else {
        flashcardContent.innerHTML = `<p>${flashcards[currentFlashcardIndex].question}</p>`; // Show question
      }
    }

    // Function to replace newline characters with <br> tags
    function formatAnswer(answer) {
      return answer.replace(/\n/g, '<br>'); // Replace new lines with <br> tags
    }

    // Redirect to landing page
    function goToLandingPage() {
      window.location.href = '/landing'; // Redirect to landing page
    }

    // Update the flashcard content
    function updateFlashcard() {
      const flashcardContent = document.getElementById('flashcardContent');
      flipped = false; // Reset flip state
      flashcardContent.innerHTML = `<p>${flashcards[currentFlashcardIndex].question}</p>`;
      updateButtonStates();
    }

    // Update the navigation button states
    function updateButtonStates() {
      document.getElementById('prevButton').disabled = currentFlashcardIndex === 0;
      document.getElementById('nextButton').disabled = currentFlashcardIndex === flashcards.length - 1;
    }

    // Initial button state update
    document.addEventListener('DOMContentLoaded', () => {
      updateButtonStates(); // Set correct state when the page loads
    });

    // Delete flashcard function
    function deleteFlashcard() {
      const flashcardId = flashcards[currentFlashcardIndex].id;
      fetch(`/api/delete-flashcard/${flashcardId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      .then(response => {
        if (response.ok) {
          // Remove the current flashcard from the UI
          flashcards.splice(currentFlashcardIndex, 1);
          if (flashcards.length > 0) {
            // Move to the next card or previous card if it's the last card
            if (currentFlashcardIndex >= flashcards.length) {
              currentFlashcardIndex--;
            }
            updateFlashcard();
          } else {
            goToLandingPage(); // No flashcards left, go to landing page
          }
        } else {
          alert('Failed to delete flashcard');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while deleting the flashcard');
      });
    }

    function saveAsPDF() {
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF();

      if (flashcards.length === 0) {
        alert('No flashcards to save.');
        return;
      }

      // Add subject and topic on the first page
      doc.setFontSize(18);
      doc.text('Subject: <%= subject %>', 10, 20);  // Subject as header

      doc.setFontSize(14);
      doc.text('Topic: <%= topic %>', 10, 30);  // Topic as subheader

      // Move to next page
      doc.addPage();

      // Set initial Y position for flashcards
      let yPosition = 20;

      // Loop through all flashcards and add one per page
      flashcards.forEach((flashcard, index) => {
        // Add flashcard question
        doc.setFontSize(12);
        doc.text(`Question ${index + 1}:`, 10, yPosition);
        doc.text(flashcard.question, 10, yPosition + 10);

        // Add flashcard answer
        yPosition += 20; // Add space before answer
        doc.text('Answer:', 10, yPosition);
        doc.text(flashcard.answer, 10, yPosition + 10);

        // Add a new page for the next flashcard if space is needed
        if (index < flashcards.length - 1) {
          doc.addPage();
          yPosition = 20; // Reset Y position for the next page
        }
      });

      doc.save('flashcards.pdf');
    }
  </script>

</body>
</html>
